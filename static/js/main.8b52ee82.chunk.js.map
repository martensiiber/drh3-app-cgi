{"version":3,"sources":["img/logo.svg","components/InterviewerInput/InterviewerInput.js","components/MapSettings.js","MapStyles.js","components/Map.js","components/TopBar/TopBar.js","MapApp.js","components/UploadBox/UploadBox.js","components/InfoTable/InfoTable.js","components/MainContent/MainContent.js","TablesPage.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InterviewerInput","this","props","interviewersAmount","handleAdd","handleRemove","handleAmountChange","className","htmlFor","onClick","bind","TextField","id","label","type","onChange","value","variant","React","Component","MapSettings","interviewers","handleSelectInterviewer","nameFilter","handleFilterChange","List","filter","interviewer","name","includes","map","labelId","ListItem","key","button","ListItemIcon","Checkbox","edge","checked","selected","tabIndex","disableRipple","inputProps","ListItemText","primary","to","pathname","state","fromMap","MapStyles","interviewerStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","areaStyle","addressStyle","symbol","symbolType","size","rotateWithView","offset","opacity","incompleteAddressStyle","completeAddressStyle","getInterviewersCoordinates","feature","Feature","Point","coordinates","setId","set","getAddressCoordinates","addresses","isVisited","address","Map","changeInteraction","select","removeInteraction","Select","condition","click","layers","interviewersLayer","localOverlay","overlay","popupHeader","popupBody","addInteraction","on","e","featureId","getId","selectedInterviewer","find","int","objectCount","length","distance","Math","round","random","fuelUsage","current","innerHTML","setPosition","proj4","defs","register","createRef","popup","closer","interviewerCoordinates","VectorLayer","source","VectorSource","features","style","interviewerAreas","wgsCoords","toLonLat","lestCoords","concaveman","coordinate","fromLonLat","Polygon","areasLayer","incompleteAddressCoordinates","incompleteAddressesLayer","WebGLPointsLayer","disableHitDetection","completeAddressCoordinates","completeAddressesLayer","view","View","center","zoom","minZoom","maxZoom","projection","getProjection","Overlay","element","autoPan","autoPanAnimation","duration","olMap","controls","TileLayer","OSMSource","overlays","target","refs","mapContainer","localCloser","onclick","undefined","blur","prevProps","setSource","Fragment","ref","href","cellSpacing","TopBar","homePage","survey","src","logo","alt","rawInterviewers2","adr_xy","kysitleja_id","nimi","sisendaadress","fromCity","linnalinemaaline","rawAddresses","adr_id","surveys","uuring","is_visited","addrCityMap","forEach","addr","prepareAddresses","addressesPerInterview","rawData","distRow","src_id","push","target_id","Object","values","list","sort","a","b","MIN_STEP","MAX_STEP","step","stepOneNames","stepTwoNames","stepThreeNames","MapApp","stepListener","event","min","followStep","max","cloneDeep","interviewersDefault","setState","handleInterviewersChange","interviewsCount","changeTimeout","clearTimeout","setTimeout","slice","newValue","handleInterviewerSelect","prevState","newFilter","location","search","substring","filteredAddresses","addressedInterviewers","window","addEventListener","preparedAddresses","removeEventListener","selectedInterviewers","dividedAddresses","interviewersCopy","keys","interviewId","addressId","splitAddresses2","addressesPerSurvey","usedAddresses","Set","dividedAreas","intCity","i","abcdef","counter","adrid","has","add","divideAddresses","Grid","container","item","xs","UploadBox","rows","tableData","desc","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","classes","order","onRequestSort","TableHead","TableRow","headCell","TableCell","align","sortDirection","TableSortLabel","active","direction","property","visuallyHidden","useStyles","makeStyles","theme","root","marginTop","spacing","paper","marginBottom","table","minWidth","tableWrapper","padding","overflowX","border","clip","height","margin","overflow","position","top","InfoTable","useState","setOrder","setOrderBy","setSelected","page","setPage","dense","rowsPerPage","setRowsPerPage","Paper","Table","aria-labelledby","aria-label","numSelected","onSelectAllClick","newSelecteds","n","rowCount","TableBody","array","cmp","stabilizedThis","el","index","stableSort","getSorting","row","hover","component","scope","intervjueerimisealgus","intervjueerimise_lopp","is_complete","progress","TablePagination","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","newPage","onChangeRowsPerPage","parseInt","MainContent","console","log","TablesPages","Home","fontSize","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b52ee82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ad654510.svg\";","import React from 'react';\nimport './interviewer-input.scss';\nimport TextField from \"@material-ui/core/TextField\";\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nclass InterviewerInput extends React.Component {\n    render() {\n        const { interviewersAmount, handleAdd, handleRemove, handleAmountChange } = this.props;\n        return(\n            <div className=\"interviewer-input__wrapper\">\n                <label htmlFor=\"klAmount\" className=\"interviewer-input__label\">Küsitlejate arv</label>\n                <div className=\"interviewer-input__actions\">\n                    <span className=\"interviewer-input__action interviewer-input__action--minus\" onClick={handleRemove.bind(this)}>\n                        <RemoveIcon/>\n                    </span>\n                    <TextField\n                        className=\"interviewer-input\"\n                        id=\"klAmount\"\n                        label=\"Arv\"\n                        type=\"number\"\n                        onChange={handleAmountChange}\n                        value={interviewersAmount}\n                        variant=\"outlined\"\n                    />\n                    <span className=\"interviewer-input__action interviewer-input__action--plus\" onClick={handleAdd.bind(this)}>\n                        <AddIcon/>\n                    </span>\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\nexport default InterviewerInput;","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport './mapSettings.scss';\nimport InterviewerInput from \"./InterviewerInput/InterviewerInput\";\nimport {Link} from \"react-router-dom\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst MapSettings = ({\n                         interviewers,\n                         handleSelectInterviewer,\n                         handleAmountChange,\n                         handleAdd,\n                         handleRemove,\n                         interviewersAmount,\n                         nameFilter,\n                         handleFilterChange,\n                }) => {\n    return (\n        <div className=\"interviewers-settings\">\n            <div className=\"interviewers-settings__title\">\n                <PermIdentityIcon/> Küsitlejad\n            </div>\n            <InterviewerInput\n                interviewersAmount={interviewersAmount}\n                handleAdd={handleAdd}\n                handleRemove={handleRemove}\n                handleAmountChange={handleAmountChange}\n            />\n            <div className=\"interviewer-input__filter-wrapper\">\n                <TextField\n                    className=\"interviewer-input__filter\"\n                    label=\"Filtreeri nime järgi\"\n                    variant=\"outlined\"\n                    value={nameFilter}\n                    onChange={handleFilterChange}\n                />\n            </div>\n\n            <List className=\"interviewers-list\">\n                {\n                    interviewers\n                        .filter(interviewer => nameFilter === '' || interviewer.name.includes(nameFilter))\n                        .map((interviewer) => {\n                            const labelId = `checkbox-list-label-${interviewer.id}`;\n                            return(\n                                <ListItem key={interviewer.id} button onClick={handleSelectInterviewer.bind(this, interviewer.id)}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={interviewer.selected}\n                                            tabIndex={-1}\n                                            disableRipple\n                                            inputProps={{ 'aria-labelledby': labelId }}\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText id={labelId} primary={interviewer.name} />\n                                </ListItem>\n                            )\n\n                        })\n                }\n            </List>\n\n            <div className=\"interviewers-settings__confirm\">\n                <Link to={{pathname: \"/tables\", state: {fromMap: true}}} className=\"interviewers-settings__confirm-button\">Kinnita</Link>\n            </div>\n        </div>\n    );\n}\n\nexport default MapSettings;","import Style from 'ol/style/Style';\nimport Circle from 'ol/style/Circle';\nimport Stroke from 'ol/style/Stroke';\nimport Fill from 'ol/style/Fill';\n\nexport default class MapStyles {\n  static interviewerStyle = new Style({\n    image: new Circle({\n      radius: 5,\n      fill: new Fill({\n        color: 'rgb(77, 138, 240)',\n      }),\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1)',\n        width: 2,\n      }),\n    }),\n  });\n\n  static areaStyle = new Style({\n    fill: new Fill({\n      color: 'rgba(0, 90, 163, 0.2)',\n    }),\n    stroke: new Stroke({\n      color: 'rgb(0, 90, 163)',\n      width: 2,\n    }),\n  });\n\n  static addressStyle = {\n    symbol: {\n      symbolType: 'circle',\n      size: 6,\n      color: '#ff2200',\n      rotateWithView: false,\n      offset: [0, 0],\n      opacity: 1\n    },\n  };\n  static incompleteAddressStyle = {\n    symbol: {\n        symbolType: 'circle',\n        size: 6,\n        color: '#cc0000',\n        rotateWithView: false,\n        offset: [0, 0],\n        opacity: 1\n    },\n  };\n\n  static completeAddressStyle = {\n    symbol: {\n        symbolType: 'circle',\n        size: 6,\n        color: '#308428',\n        rotateWithView: false,\n        offset: [0, 0],\n        opacity: 1\n      },\n  };\n};\n","import React from 'react';\n\nimport View from 'ol/View';\nimport { get as getProjection } from 'ol/proj';\nimport olMap from 'ol/Map';\nimport Overlay from 'ol/Overlay';\nimport { click } from 'ol/events/condition';\nimport Select from 'ol/interaction/Select';\nimport TileLayer from 'ol/layer/Tile';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport Polygon from 'ol/geom/Polygon';\nimport VectorLayer from 'ol/layer/Vector';\nimport WebGLPointsLayer from 'ol/layer/WebGLPoints';\nimport OSMSource from 'ol/source/OSM';\nimport VectorSource from 'ol/source/Vector';\nimport proj4 from 'proj4';\nimport { register } from 'ol/proj/proj4';\nimport MapStyles from '../MapStyles';\nimport { toLonLat, fromLonLat } from 'ol/proj';\nimport * as concaveman from 'concaveman';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport 'ol/ol.css';\nimport './map.scss';\n\nconst CONCAVITY = 6;\n\nconst getInterviewersCoordinates = (interviewers) => {\n    return interviewers\n        .map(interviewer => {\n            const feature = new Feature(new Point(interviewer.coordinates));\n            feature.setId(interviewer.id);\n            feature.set('type', 'interviewer');\n            return feature;\n        });\n};\n\nconst getAddressCoordinates = (addresses, isVisited) => {\n    return addresses\n        .filter(address => address.isVisited === isVisited)\n        .map(address => {\n            const feature = new Feature(new Point(address.coordinates));\n            feature.setId(address.id);\n            feature.set('type', 'address');\n            return feature;\n        })\n}\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n\n        proj4.defs('EPSG:3301', '+proj=lcc +lat_1=59.33333333333334 +lat_2=58 '\n            + '+lat_0=57.51755393055556 +lon_0=24 +x_0=500000 +y_0=6375000 +ellps=GRS80 '\n            + '+towgs84=0,0,0,0,0,0,0 +units=m +no_defs');\n        register(proj4);\n        this.overlay = null;\n        this.popupHeader = React.createRef();\n        this.popupBody = React.createRef();\n        this.popup = React.createRef();\n        this.closer = React.createRef();\n        this.select = null;\n        this.map = null;\n    }\n\n    componentDidMount() {\n        // Interviewers coordinates layer\n        const interviewerCoordinates = getInterviewersCoordinates(this.props.interviewers);\n\n        this.interviewersLayer = new VectorLayer({\n            source: new VectorSource({\n                features: interviewerCoordinates\n            }),\n            style: MapStyles.interviewerStyle,\n        });\n\n        // Interviewers areas layer\n        const interviewerAreas = this.props.interviewers.map((interviewer) => {\n            const wgsCoords = interviewer.addresses.map(address => (\n                toLonLat(address.coordinates, 'EPSG:3301')\n            ));\n            const concave = concaveman(wgsCoords, CONCAVITY);\n            const lestCoords = concave.map(coordinate => fromLonLat(coordinate, 'EPSG:3301'));\n            return new Feature(new Polygon([lestCoords]));\n        });\n\n        this.areasLayer = new VectorLayer({\n            source: new VectorSource({\n                features: interviewerAreas\n            }),\n            style: MapStyles.areaStyle,\n        });\n\n        // Addresses coordinates layer\n        const incompleteAddressCoordinates = getAddressCoordinates(this.props.addresses, false);\n        this.incompleteAddressesLayer = new WebGLPointsLayer({\n            source: new VectorSource({\n                features: incompleteAddressCoordinates\n            }),\n            style: MapStyles.incompleteAddressStyle,\n            disableHitDetection: false\n        });\n\n        const completeAddressCoordinates = getAddressCoordinates(this.props.addresses, true);\n        this.completeAddressesLayer = new WebGLPointsLayer({\n            source: new VectorSource({\n                features: completeAddressCoordinates\n            }),\n            style: MapStyles.completeAddressStyle,\n            disableHitDetection: false\n        });\n\n        this.view = new View({\n            center: [526493, 6513417],\n            zoom: 8,\n            minZoom: 2,\n            maxZoom: 28,\n            projection: getProjection('EPSG:3301')\n        });\n\n        this.overlay = new Overlay({\n            element: this.popup.current,\n            autoPan: true,\n            autoPanAnimation: {\n                duration: 250\n            }\n        });\n\n        this.map = new olMap({\n            view: this.view,\n            controls: [],\n            layers: [\n                new TileLayer({\n                    source: new OSMSource(),\n                }),\n                this.incompleteAddressesLayer,\n                this.completeAddressesLayer,\n                this.areasLayer,\n                this.interviewersLayer,\n            ],\n            overlays: [this.overlay],\n            target: this.refs.mapContainer\n        });\n\n        let localOverlay = this.overlay;\n        let localCloser = this.closer.current;\n\n        localCloser.onclick = function() {\n            localOverlay.setPosition(undefined);\n            localCloser.blur();\n            return false;\n        };\n    }\n\n    changeInteraction = (interviewers) => {\n        if (this.select !== null) {\n            this.map.removeInteraction(this.select);\n        }\n        this.select = new Select({\n            condition: click,\n            layers: [this.interviewersLayer]\n        });\n\n        const localOverlay = this.overlay;\n        const popupHeader = this.popupHeader;\n        const popupBody = this.popupBody;\n\n        if (this.select !== null) {\n            this.map.addInteraction(this.select);\n            this.select.on('select', function(e) {\n                const feature = e.selected[0];\n\n                if(!!feature) {\n                    const featureId = feature.getId();\n                    const selectedInterviewer = interviewers.find(int => int.id === featureId);\n                    const edit = \"<svg class=\\\"MuiSvgIcon-root\\\" focusable=\\\"false\\\" viewBox=\\\"0 0 24 24\\\" aria-hidden=\\\"true\\\" role=\\\"presentation\\\"><path d=\\\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\\\"></path></svg>\";\n                    if (!selectedInterviewer.addresses) {\n                        selectedInterviewer.addresses = [];\n                    }\n                    const objectCount = selectedInterviewer.addresses.length;\n                    const distance = Math.round(25 + Math.random() * 125); \n                    const fuelUsage = distance / 5;\n\n                    popupHeader.current.innerHTML = selectedInterviewer.name;\n                    popupBody.current.innerHTML = `\n                        <tr>\n                            <td>Jaoskonna nr</td>\n                            <td>${selectedInterviewer.id}</td>\n                        </tr>\n                        <tr>\n                            <td>Objekte</td>\n                            <td>${objectCount}</td>\n                        </tr>\n                        <tr>\n                            <td>Prognoositud läbisõit</td>\n                            <td>${distance} km</td>\n                        </tr>\n                        <tr>\n                            <td>Kütusekulu</td>\n                            <td>${fuelUsage} L</td>\n                        </tr>\n                        <tr>\n                            <td>Küsitleja alguspunkt</td>\n                            <td>${selectedInterviewer.address} ${edit}</td>\n                        </tr>`;\n\n                    localOverlay.setPosition(selectedInterviewer.coordinates);\n                }\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.interviewers !== this.props.interviewers) {\n            // Interviewers changed\n            const interviewerCoordinates = getInterviewersCoordinates(this.props.interviewers);\n\n            const interviewerAreas = this.props.interviewers\n                .filter(interviewer => interviewer.addresses.length !== 0)\n                .map((interviewer) => {\n                    const wgsCoords = interviewer.addresses.map(address => (\n                        toLonLat(address.coordinates, 'EPSG:3301')\n                    ));\n                    const concave = concaveman(wgsCoords, CONCAVITY);\n                    const lestCoords = concave.map(coordinate => fromLonLat(coordinate, 'EPSG:3301'));\n                    return new Feature(new Polygon([lestCoords]));\n                });\n\n            this.interviewersLayer.setSource(new VectorSource({\n                features: interviewerCoordinates\n            }));\n\n            this.areasLayer.setSource(new VectorSource({\n                features: interviewerAreas\n            }))\n            this.changeInteraction(this.props.interviewers);\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div id=\"map\" ref=\"mapContainer\"></div>\n                <div id=\"popup\" className=\"ol-popup\" ref={this.popup}>\n                    <a href=\"#\" id=\"popup-closer\" className=\"ol-popup-closer\" ref={this.closer}></a>\n                    <div id=\"popup-content\">\n                        <div id=\"popup-header\" className=\"popup__header\" ref={this.popupHeader}></div>\n                        <table id=\"popup-body\" className=\"popup__table\" ref={this.popupBody} cellSpacing=\"5px\"></table>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Map;\n","import React from 'react';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport logo from '../../img/logo.svg';\nimport './top-bar.scss';\n\nconst TopBar = ({ homePage, survey }) => {\n    return(\n        <div className={\"top-bar \" + (!homePage ? 'top-bar--not-home' : '')}>\n            <div className=\"top-bar__logo\">\n                <img src={logo} alt=\"Logo\"/>\n            </div>\n            <div className=\"top-bar__actions\">\n                {homePage &&\n                    <React.Fragment>\n                        <div className=\"top-bar__actions-item top-bar__actions-language\">\n                            <div className=\"top-bar__actions-item-label top-bar__actions-language-label\">Keel:</div>\n                            <div className=\"top-bar__actions-item-value top-bar__actions-language-switcher\">\n                                EST <KeyboardArrowDownIcon/>\n                            </div>\n                        </div>\n                        <div className=\"top-bar__actions-item top-bar__actions-user\">\n                            <div className=\"top-bar__actions-item-label top-bar__actions-user-label\">Kasutaja:</div>\n                            <div className=\"top-bar__actions-item-value top-bar__actions-user-name\">Maarika Maasikas</div>\n                        </div>\n                    </React.Fragment>\n                }\n\n                {!homePage &&\n                    <React.Fragment>\n                        <div className=\"top-bar__actions-item--not-home top-bar__actions-language\">\n                            <div className=\"top-bar__actions-item-label top-bar__actions-language-label\">Uuring:</div>\n                            <div className=\"top-bar__actions-item-value top-bar__actions-language-switcher\">\n                                {survey ? survey : 'CUTI-2020'}\n                            </div>\n                        </div>\n                        <div className=\"top-bar__actions-item--not-home top-bar__actions-user\">\n                            <div className=\"top-bar__actions-item-label top-bar__actions-user-label\">Tähtaeg:</div>\n                            <div className=\"top-bar__actions-item-value top-bar__actions-user-name\">31.01.2020</div>\n                        </div>\n                    </React.Fragment>\n                }\n                <div className=\"top-bar__actions-item top-bar__actions-logout\">\n                    <ExitToAppIcon />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TopBar;\n\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport MapSettings from \"./components/MapSettings\";\nimport Map from \"./components/Map\";\nimport cloneDeep from \"lodash-es/cloneDeep\";\nimport TopBar from \"./components/TopBar/TopBar\";\nimport rawAddresses from './data/adr_valim_xy_aggr_cityurban.json';\n\nimport rawInterviewers2 from './data/kysitlejad_cityurban_v2.json';\n// import rawData from './data/';\n\nimport rawData from './data/all_adr_all_notnull.json';\n\n// Temporary transformation\nconst interviewers = rawInterviewers2\n    .filter((interviewer) => interviewer.adr_xy && interviewer.adr_xy.coordinates)\n    .map((interviewer) => ({\n        id: interviewer.kysitleja_id,\n        name: interviewer.nimi,\n        address: interviewer.sisendaadress,\n        selected: true, // interviewer.linn_vald === 'Tallinn',\n        fromCity: interviewer.linnalinemaaline === 'linnaline',\n        coordinates: interviewer.adr_xy.coordinates\n    }));\n\nconst addresses = rawAddresses\n    .filter((address) => address.adr_xy && address.adr_xy.coordinates)\n    .map((address) => ({\n        id: +address.adr_id,\n        coordinates: address.adr_xy.coordinates,\n        //intersectingZones: rawData\n        //    .filter(data => data.target_id === address.adr_id)\n        //    .map(data => ({ id: data.src_id, distance: data.agg_cost })),\n        surveys: address.uuring,\n        isVisited: address.is_visited,\n        fromCity: address.linnalinemaaline === 'linnaline' || address.linnalinemaaline === null,\n    }));\n\n\nconst addrCityMap = {}\naddresses.forEach(addr => addrCityMap[addr.id] = addr.fromCity);\n\nconst findInterviewerById = (interviewers, address, zone) => {\n    return interviewers\n        .filter(interviewer => interviewer.addresses.length < 50 && interviewer.fromCity === address.fromCity)\n        .find(interviewer => interviewer.id === zone.id);\n}\n\nconst splitAddresses = (addresses, interviewers) => {\n    const addressesCopy = cloneDeep(addresses);\n    const interviewersCopy = cloneDeep(interviewers);\n    // Add empty address array\n    interviewersCopy.forEach((interviewer) => {\n        interviewer.addresses = [];\n    });\n\n    // Add addresses to interviewers\n    addressesCopy.forEach((address) => {\n        // Remove not selected interviewers\n        address.intersectingZones = address.intersectingZones.filter((zone) => {\n            const found = findInterviewerById(interviewersCopy, address, zone);\n            return !!found;\n        });\n        if (address.intersectingZones.length === 0) return;\n        const closest = address.intersectingZones.reduce((closest, current) => {\n            return current.distance < closest.distance ? current : closest\n        });\n        const interviewer = findInterviewerById(interviewersCopy, address, closest);\n        if (!interviewer) return;\n        interviewer.addresses.push({\n            id: address.id,\n            coordinates: address.coordinates,\n        });\n    });\n    return interviewersCopy;\n}\n\nconst prepareAddresses = (addresses) => {\n    const addressesPerInterview = {};\n    rawData.forEach(distRow => {\n        if (addressesPerInterview[+distRow.src_id]) {\n            addressesPerInterview[+distRow.src_id].push({ id: +distRow.target_id, distance: +distRow.round });\n        } else {\n            addressesPerInterview[+distRow.src_id] = [{ id: +distRow.target_id, distance: +distRow.round }]\n        }\n    });\n    Object.values(addressesPerInterview).forEach((list) =>\n        list.sort((a, b) => a.distance - b.distance)\n    );\n    return addressesPerInterview;\n}\n\nconst divideAddresses = (addressesPerSurvey, interviewers) => {\n    const usedAddresses = new Set();\n    const dividedAreas = {};\n\n    const intCity = {};\n    interviewers.forEach(i => intCity[i.id] = i.fromCity);\n    // do not touch\n    const abcdef = Object.keys(addressesPerSurvey).map(a=>+a);\n    let keys = interviewers.map(a => a.id).filter(a=> abcdef.includes(a));\n    let counter = 0;\n    const CAP = 550;\n\n    keys.forEach(key => dividedAreas[key] = []);\n\n    while (keys.length !== 0) {\n        keys.forEach(key => {\n            const adrid = addressesPerSurvey[key][counter].id;\n            if (!usedAddresses.has(adrid) && addrCityMap[adrid] === intCity[key] ) {\n                dividedAreas[key].push(adrid);\n                usedAddresses.add(adrid);\n            }\n        });\n        counter += 1;\n        keys = keys.filter((key) => dividedAreas[key].length < CAP);\n        keys = keys.filter((key) => counter < addressesPerSurvey[key].length);\n    }\n    return dividedAreas;\n};\n\nconst splitAddresses2 = (interviewers, dividedAddresses) => {\n    const interviewersCopy = cloneDeep(interviewers);\n\n    interviewersCopy.forEach((interviewer) => {\n        interviewer.addresses = [];\n    });\n    Object.keys(dividedAddresses).forEach((interviewId) => {\n        const interviewer = interviewersCopy.find(interviewer => interviewer.id === +interviewId);\n        if (!interviewer) return;\n        dividedAddresses[interviewId].forEach(addressId => {\n            const address = addresses.find(address => address.id === addressId);\n            if (!address) return;\n            interviewer.addresses.push({\n                id: address.id,\n                coordinates: address.coordinates,\n            });\n        })\n    });\n    return interviewersCopy;\n}\n\nlet MIN_STEP = 1;\nlet MAX_STEP = 4;\nlet step = MIN_STEP;\n\nconst stepOneNames = ['Rasmus', 'Maria', 'Svetlana', 'Sirje', 'Kreet', 'Igor', 'Teet'];\nconst stepTwoNames = ['Rasmus', 'Maria', 'Svetlana', 'Sirje', 'Erik', 'Kreet', 'Igor', 'Teet'];\nconst stepThreeNames = ['Rasmus', 'Maria', 'Svetlana', 'Sirje', 'Erik', 'Kreet', 'Igor', 'Piret', 'Teet'];\n\nclass MapApp extends React.Component {\n    constructor(props) {\n        super(props);\n        const survey = props.location.search ? props.location.search.substring(3) : null;\n        const filteredAddresses = addresses.filter((address) => survey === '' || !address.surveys || address.surveys.includes(survey));\n        // console.log(filteredAddresses);\n        this.state = {\n            survey,\n            interviewersDefault: interviewers,\n            interviewers: [],\n            interviewersAmount: 0,\n            addressedInterviewers: [],\n            addresses: filteredAddresses,\n            nameFilter: '',\n        }\n\n        window.addEventListener('keydown', this.stepListener)\n    }\n\n    componentDidMount() {\n        this.setState({\n            interviewersAmount: this.state.interviewersDefault.filter(int => int.selected).length,\n            preparedAddresses: prepareAddresses(this.state.addresses)\n        });\n        this.followStep();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.stepListener);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.interviewers !== this.state.interviewers) {\n            // Interviewers changed\n            const selectedInterviewers = this.state.interviewers.filter(interviewer => interviewer.selected);\n            const dividedAddresses = divideAddresses(this.state.preparedAddresses, selectedInterviewers);\n            const addressedInterviewers = splitAddresses2(selectedInterviewers, dividedAddresses);\n            this.setState({addressedInterviewers});\n        }\n    }\n\n    stepListener = (event) => {\n        const key = event.key;\n        if (key === 'ArrowRight') {\n            step = Math.min(step + 1, MAX_STEP);\n            this.followStep();\n        }\n        if (key === 'ArrowLeft') {\n            step = Math.max(step - 1, MIN_STEP);\n            this.followStep();\n        }\n    }\n\n    followStep = () => {\n        if (step === 1) {\n            const interviewers = cloneDeep(this.state.interviewersDefault)\n            interviewers.forEach(interviewer => interviewer.selected = false);\n            interviewers.filter(interviewer => stepOneNames.includes(interviewer.name))\n                .forEach(interviewer => interviewer.selected = true);\n            this.setState({interviewers});\n        } else if (step === 2) {\n            const interviewers = cloneDeep(this.state.interviewersDefault)\n            interviewers.forEach(interviewer => interviewer.selected = false);\n            interviewers.filter(interviewer => stepTwoNames.includes(interviewer.name))\n                .forEach(interviewer => interviewer.selected = true);\n            this.setState({interviewers});\n        } else if (step === 3) {\n            const interviewers = cloneDeep(this.state.interviewersDefault)\n            interviewers.forEach(interviewer => interviewer.selected = false);\n            interviewers.filter(interviewer => stepThreeNames.includes(interviewer.name))\n                .forEach(interviewer => interviewer.selected = true);\n            this.setState({interviewers});\n        } else if (step === 4) {\n            const interviewers = cloneDeep(this.state.interviewersDefault)\n            this.setState({interviewers});\n        }\n    }\n\n    handleInterviewersChange = (interviewsCount) => {\n        if (this.changeTimeout) {\n            clearTimeout(this.changeTimeout);\n        }\n        this.changeTimeout = setTimeout(() => {\n            let interviewers = cloneDeep(this.state.interviewersDefault)\n                .slice(0, interviewsCount);\n            interviewers.forEach(int => int.selected = true);\n\n            this.setState({interviewers});\n            this.changeTimeout = null;\n        }, 500);\n    };\n\n    handleAmountChange = (event) => {\n        const newValue = Math.max(Math.min(+event.target.value, this.state.interviewersDefault.length), 0);\n        this.setState({\n            interviewersAmount: newValue\n        }, () => this.handleInterviewersChange(newValue));\n    };\n\n    handleInterviewerSelect = (id) => {\n        this.setState(prevState => ({\n            ...prevState,\n            interviewers: prevState.interviewers.map(\n                int => int.id === id ? {...int, selected: !int.selected} : int\n            )\n        }))\n    };\n\n    handleAdd = () => {\n        const newValue = Math.min(this.state.interviewersAmount + 1, this.state.interviewersDefault.length);\n        this.setState({\n            interviewersAmount: newValue\n        }, () => this.handleInterviewersChange(newValue));\n    };\n\n    handleRemove = () => {\n        let newValue = this.state.interviewersAmount - 1;\n        this.setState({\n            interviewersAmount: newValue >= 0 ? newValue : 0,\n        }, () => this.handleInterviewersChange(newValue));\n    };\n\n    handleFilterChange = (event) => {\n        const newFilter = event.target.value;\n        this.setState({\n            nameFilter: newFilter\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Grid container>\n                    <Grid item container xs={3}>\n                        <MapSettings\n                            interviewersAmount={this.state.interviewersAmount}\n                            interviewers={this.state.interviewers}\n                            handleSelectInterviewer={this.handleInterviewerSelect}\n                            handleAdd={this.handleAdd}\n                            handleRemove={this.handleRemove}\n                            handleAmountChange={this.handleAmountChange}\n                            handleFilterChange={this.handleFilterChange}\n                            nameFilter={this.state.nameFilter}\n                        />\n\n                    </Grid>\n                    <Grid item container xs={9}>\n                        <TopBar\n                            homePage={false}\n                            survey={this.state.survey}\n                        />\n                        <Map\n                            interviewers={this.state.addressedInterviewers}\n                            addresses={this.state.addresses}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    };\n}\n\nexport default MapApp;","import React from 'react';\nimport './uplaod-box.scss';\n\nconst UploadBox = () => {\n    return(\n        <React.Fragment>\n            <div className='upload-box'>\n                <div className=\"upload-box__title\">\n                    Tiri & lohista uue uuringu lisamiseks\n                </div>\n                <div className=\"upload-box__actions\">\n                    <span className=\"upload-box__actions-text\">fail siia või</span> <button className=\"upload-box__actions--button\">Vali</button>\n                </div>\n            </div>\n            <div className=\"upload-box__notice\">Mitme faili valimiseks hoia all CTRL/CMND</div>\n        </React.Fragment>\n    )\n};\n\nexport default UploadBox;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport tableData from '../../data/adr_valim_aggrregated';\nimport { Link } from 'react-router-dom';\n\nimport './info-table.scss';\n\nconst rows = tableData;\n\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n}\n\nconst headCells = [\n    { id: 'uuring', numeric: false, disablePadding: true, label: 'Uuring' },\n    { id: 'intervjueerimisealgus', numeric: false, disablePadding: false, label: 'Algusaeg' },\n    { id: 'intervjueerimise_lopp', numeric: false, disablePadding: false, label: 'Tähtaeg' },\n    { id: 'interviewers', numeric: false, disablePadding: false, label: 'Küsitlejaid' },\n    { id: 'is_complete', numeric: false, disablePadding: false, label: 'Staatus' },\n    { id: 'progress', numeric: false, disablePadding: false, label: 'Progress' },\n    { id: 'link', numeric: false, disablePadding: false, label: '' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, order, orderBy, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    tableWrapper: {\n        padding: '0 20px',\n        overflowX: 'auto',\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function InfoTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === 'desc';\n        setOrder(isDesc ? 'asc' : 'desc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = event => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map(n => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = event => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = name => selected.indexOf(name) !== -1;\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <div className={classes.tableWrapper}>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={dense ? 'small' : 'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getSorting(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    const key = `${row.uuring}-${index}`;\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={key}\n                                        >\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\">\n                                                {row.uuring}\n                                            </TableCell>\n                                            <TableCell>{row.intervjueerimisealgus}</TableCell>\n                                            <TableCell>{row.intervjueerimise_lopp}</TableCell>\n                                            <TableCell>{row.interviewers}</TableCell>\n                                            <TableCell>\n                                                {row.is_complete ? 'Tehtud' : 'Teostamisel'}\n                                            </TableCell>\n                                            <TableCell>{row.progress}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <Link to={`/map?q=${row.uuring}`} className=\"info-table__link\">Vaata kaardil</Link>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                        </TableBody>\n                    </Table>\n                </div>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    backIconButtonProps={{\n                        'aria-label': 'previous page',\n                    }}\n                    nextIconButtonProps={{\n                        'aria-label': 'next page',\n                    }}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}","import React from 'react';\nimport './main-content.scss';\nimport UploadBox from \"../UploadBox/UploadBox\";\nimport InfoTable from \"../InfoTable/InfoTable\";\n\nclass MainContent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        console.log('from map value in content via props', this.props.fromMap);\n    }\n\n    render() {\n        return (\n            <div className=\"main-content\">\n                <UploadBox />\n                <InfoTable />\n            </div>\n        )\n    };\n}\n\nexport default MainContent;","import React from 'react';\nimport MainContent from \"./components/MainContent/MainContent\";\nimport './App.css';\nimport TopBar from \"./components/TopBar/TopBar\";\n\nclass TablesPages extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fromMap: false\n        }\n    }\n    componentDidMount() {\n\n        if (!!this.props.location.fromMap) {\n            const {fromMap} = this.props.location.state;\n            this.setState({fromMap});\n        }\n        console.log(this.props);\n        // console.log(fromMap, \" from map\");\n\n    }\n\n    render() {\n        const {fromMap} = this.state;\n        return(\n            <React.Fragment>\n                <div className=\"app\">\n                    <TopBar homePage={true}/>\n                    <MainContent fromMap={fromMap}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n};\n\nexport default TablesPages;","import React from 'react';\nimport logo from '../../img/logo.svg';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport './home.scss';\nimport {Link} from \"react-router-dom\";\n\nconst Home = () => {\n    return(\n        <div className=\"home-page\">\n            <div className=\"home-page__logo\">\n                <img src={logo} alt=\"Satikas\"/>\n            </div>\n            <div className=\"home-page__content\">\n                <h1>Statikas</h1>\n\n                <Link to={\"/tables\"} className=\"home-page__content-action\">\n                    Sisene <ArrowForwardIosIcon fontSize='small'/>\n                </Link>\n            </div>\n        </div>\n    )\n};\n\nexport default Home;","import React from 'react';\nimport MapApp from \"./MapApp\";\n\nimport {\n    BrowserRouter as Router,\n    Route\n} from 'react-router-dom';\nimport TablesPages from \"./TablesPage\";\nimport Home from \"./components/Home/Home\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Route exact path='/' component={Home}></Route>\n                <Route exact path='/tables' component={TablesPages}></Route>\n                <Route path='/map' component={MapApp}></Route>\n            </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}